// Need to use the React-specific entry point to import `createApi`
import { createApi } from "@reduxjs/toolkit/query/react";

import { getBaseQuery } from "@/lib/common";

// Define a service using a base URL and expected endpoints
export const searchsApiSlice = createApi({
  baseQuery: getBaseQuery("page"),
  reducerPath: "searchApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Search"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getPage: build.query<
      { html?: string; date?: string; error?: string },
      { date: string; url: string }
    >({
      query: (queryData) =>
        `?date=${queryData.date}&url=${encodeURIComponent(queryData.url)}`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, queryData) => [
        { type: "Search", id: queryData.url + queryData.date },
      ],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetPageQuery } = searchsApiSlice;
